# MENOR PARTIÇÃO COMUM DE STRINGS
#
# Instância: Dois strings x e y, tal que o string y é uma permutação do string x.
# 
# Solução: Uma partição P de x em substrings, que também é uma partição de y em substrings.
#
# Objetivo: Minimizar o número |P| de substrings na partição.
#

# Desenvolvido por:
#              Diego Dasso Migotto
#              Gabriel Allegretti
#              Trabalho Final da disciplina de Otimização Combinatória - Professor Marcus Ritt - UFRGS 2016/2

param ss;
/* Tamanho das Strings */

set S;
/* Index String */

set L;
/* Ligações da String 1 */

param c{i in S, j in S};
/* Caracteres iguais entre S e S */

var dc{i in S, j in S}, binary;
/* Decisão de qual dupla de caracteres iguais utilizar */

var dl{x in L, y in L}, binary;
/* Decisão de qual ligações utilizar */

maximize num_ligacoes: sum{x in L, y in L} dl[x,y];
/* Número de substrings selecionadas para formar a partição */

s.t. dcS{i in S}: sum{j in S} dc[i,j] = 1;
/* Cada caracter da string 1 só pode ser escolhido uma vez */

s.t. dcs2{j in S}: sum{i in S} dc[i,j] = 1;
/* Cada caracter da string 2 só pode ser escolhido uma vez */

s.t. lece{x in L, y in L}: dl[x,y] <= dc[x,y]; 

s.t. lece2{x in L, y in L}: dl[x,y] <= dc[x+1,y+1];
/* Somente podem ser escolhidas ligações entre caracteres escolhidos */

s.t. r1{i in S, j in S}: dc[i,j] <= c[i,j];
/* Garante que escolherá caracteres iguais existentes */

solve;

# Report / Result Section (Optional)

printf '#################################################\n';
printf '# Numero de substrings = %.d\n#\n', ss - num_ligacoes;
printf '#################################################\n';

printf '#\n';

end;
